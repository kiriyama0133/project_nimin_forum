// This file is auto-generated by @hey-api/openapi-ts
// 这个文件是由 @hey-api/openapi-ts 自动生成的

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"

// 导入所有请求和响应的类型定义
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

/**
 * 与 "items" 相关的 API 端点服务
 */
export class ItemsService {
  /**
   * 读取项目列表
   * 获取项目列表。
   * @param data 请求所需的数据。
   * @param data.skip 跳过的项目数量
   * @param data.limit 返回的项目数量限制
   * @returns ItemsPublic 成功响应 - 返回包含项目列表的公共信息
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 创建项目
   * 创建一个新的项目。
   * @param data 请求所需的数据。
   * @param data.requestBody 要创建的项目的数据
   * @returns ItemPublic 成功响应 - 返回创建的项目的公共信息
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 读取单个项目
   * 通过 ID 获取单个项目的信息。
   * @param data 请求所需的数据。
   * @param data.id 要获取的项目的 ID
   * @returns ItemPublic 成功响应 - 返回指定项目的公共信息
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 更新项目
   * 更新一个已有的项目。
   * @param data 请求所需的数据。
   * @param data.id 要更新的项目的 ID
   * @param data.requestBody 更新项目所需的数据
   * @returns ItemPublic 成功响应 - 返回更新后的项目的公共信息
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 删除项目
   * 删除一个项目。
   * @param data 请求所需的数据。
   * @param data.id 要删除的项目的 ID
   * @returns Message 成功响应 - 返回操作成功的消息
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }
}

/**
 * 与用户登录和认证相关的 API 端点服务
 */
export class LoginService {
  /**
   * 登录获取 Access Token
   * OAuth2 兼容的 token 登录，获取用于后续请求的 access token。
   * @param data 请求所需的数据。
   * @param data.formData 包含用户名和密码的表单数据
   * @returns Token 成功响应 - 返回包含 access token 的对象
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 测试 Token
   * 测试 access token 是否有效。
   * @returns UserPublic 成功响应 - 返回当前用户的公共信息
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * 恢复密码
   * 启动密码恢复流程，向指定邮箱发送重置邮件。
   * @param data 请求所需的数据。
   * @param data.email 用户的邮箱地址
   * @returns Message 成功响应 - 返回操作成功的消息
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 重置密码
   * 使用有效的重置 token 来设置新密码。
   * @param data 请求所需的数据。
   * @param data.requestBody 包含 token 和新密码的数据
   * @returns Message 成功响应 - 返回密码更新成功的消息
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 获取密码恢复邮件 HTML 内容
   * 获取用于密码恢复的电子邮件的 HTML 内容（通常仅限管理员或测试使用）。
   * @param data 请求所需的数据。
   * @param data.email 用户的邮箱地址
   * @returns string 成功响应 - 返回邮件内容的 HTML 字符串
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }
}

/**
 * 私有 API 端点服务（可能需要特殊权限）
 */
export class PrivateService {
  /**
   * 创建用户（私有）
   * 创建一个新用户（此端点可能位于私有路径下，需要特殊权限）。
   * @param data 请求所需的数据。
   * @param data.requestBody 要创建的用户的数据
   * @returns UserPublic 成功响应 - 返回创建的用户的公共信息
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }
}

/**
 * 与用户管理相关的 API 端点服务
 */
export class UsersService {
  /**
   * 读取用户列表
   * 获取用户列表（可能需要管理员权限）。
   * @param data 请求所需的数据。
   * @param data.skip 跳过的用户数量
   * @param data.limit 返回的用户数量限制
   * @returns UsersPublic 成功响应 - 返回包含用户列表的公共信息
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 创建用户
   * 创建一个新用户（通常需要管理员权限）。
   * @param data 请求所需的数据。
   * @param data.requestBody 要创建的用户的数据
   * @returns UserPublic 成功响应 - 返回创建的用户的公共信息
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 读取当前用户信息
   * 获取当前已登录用户的信息。
   * @returns UserPublic 成功响应 - 返回当前用户的公共信息
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * 删除当前用户
   * 删除当前已登录的用户账户。
   * @returns Message 成功响应 - 返回操作成功的消息
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * 更新当前用户信息
   * 更新当前已登录用户的信息。
   * @param data 请求所需的数据。
   * @param data.requestBody 要更新的用户数据
   * @returns UserPublic 成功响应 - 返回更新后的用户公共信息
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 更新当前用户密码
   * 更新当前已登录用户的密码。
   * @param data 请求所需的数据。
   * @param data.requestBody 包含当前密码和新密码的数据
   * @returns Message 成功响应 - 返回密码更新成功的消息
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 注册用户
   * 创建一个新用户，无需登录即可调用（公开注册接口）。
   * @param data 请求所需的数据。
   * @param data.requestBody 注册用户所需的数据（如邮箱、密码）
   * @returns UserPublic 成功响应 - 返回新注册用户的公共信息
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 通过 ID 读取用户信息
   * 获取指定 ID 用户的信息（可能需要特定权限）。
   * @param data 请求所需的数据。
   * @param data.userId 要获取的用户的 ID
   * @returns UserPublic 成功响应 - 返回指定用户的公共信息
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 更新用户
   * 更新指定 ID 用户的信息（通常需要管理员权限）。
   * @param data 请求所需的数据。
   * @param data.userId 要更新的用户的 ID
   * @param data.requestBody 要更新的用户数据
   * @returns UserPublic 成功响应 - 返回更新后的用户公共信息
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 删除用户
   * 删除指定 ID 的用户（通常需要管理员权限）。
   * @param data 请求所需的数据。
   * @param data.userId 要删除的用户的 ID
   * @returns Message 成功响应 - 返回操作成功的消息
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }
}

/**
 * 工具类 API 端点服务（例如测试邮件、健康检查）
 */
export class UtilsService {
  /**
   * 测试邮件发送
   * 发送一封测试邮件到指定地址。
   * @param data 请求所需的数据。
   * @param data.emailTo 接收测试邮件的邮箱地址
   * @returns Message 成功响应 - 返回操作成功的消息
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "验证错误", // Validation Error
      },
    })
  }

  /**
   * 健康检查
   * 检查后端服务的健康状态。
   * @returns boolean 成功响应 - 返回 true 或表示健康的特定值
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
