// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cookie_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cookie {
  public static partial class CookieService
  {
    static readonly string __ServiceName = "cookie.CookieService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Cookie.CookieRequest_Add> __Marshaller_cookie_CookieRequest_Add = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_Add.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieResponse> __Marshaller_cookie_CookieResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieResponse.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_Delete> __Marshaller_cookie_CookieRequest_Delete = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_Delete.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_Query> __Marshaller_cookie_CookieRequest_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_Query.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_Test> __Marshaller_cookie_CookieRequest_Test = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_Test.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_ByID> __Marshaller_cookie_CookieRequest_ByID = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_ByID.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieResponse_ByID> __Marshaller_cookie_CookieResponse_ByID = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieResponse_ByID.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_ByName> __Marshaller_cookie_CookieRequest_ByName = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_ByName.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieResponse_ByName> __Marshaller_cookie_CookieResponse_ByName = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieResponse_ByName.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieRequest_ByEmail> __Marshaller_cookie_CookieRequest_ByEmail = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieRequest_ByEmail.Parser));
    static readonly grpc::Marshaller<global::Cookie.CookieResponse_ByEmail> __Marshaller_cookie_CookieResponse_ByEmail = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cookie.CookieResponse_ByEmail.Parser));

    static readonly grpc::Method<global::Cookie.CookieRequest_Add, global::Cookie.CookieResponse> __Method_AddCookie = new grpc::Method<global::Cookie.CookieRequest_Add, global::Cookie.CookieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCookie",
        __Marshaller_cookie_CookieRequest_Add,
        __Marshaller_cookie_CookieResponse);

    static readonly grpc::Method<global::Cookie.CookieRequest_Delete, global::Cookie.CookieResponse> __Method_DeleteCookie = new grpc::Method<global::Cookie.CookieRequest_Delete, global::Cookie.CookieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCookie",
        __Marshaller_cookie_CookieRequest_Delete,
        __Marshaller_cookie_CookieResponse);

    static readonly grpc::Method<global::Cookie.CookieRequest_Query, global::Cookie.CookieResponse> __Method_QueryCookie = new grpc::Method<global::Cookie.CookieRequest_Query, global::Cookie.CookieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryCookie",
        __Marshaller_cookie_CookieRequest_Query,
        __Marshaller_cookie_CookieResponse);

    static readonly grpc::Method<global::Cookie.CookieRequest_Test, global::Cookie.CookieResponse> __Method_TestCookie = new grpc::Method<global::Cookie.CookieRequest_Test, global::Cookie.CookieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestCookie",
        __Marshaller_cookie_CookieRequest_Test,
        __Marshaller_cookie_CookieResponse);

    static readonly grpc::Method<global::Cookie.CookieRequest_ByID, global::Cookie.CookieResponse_ByID> __Method_GetCookieByID = new grpc::Method<global::Cookie.CookieRequest_ByID, global::Cookie.CookieResponse_ByID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCookieByID",
        __Marshaller_cookie_CookieRequest_ByID,
        __Marshaller_cookie_CookieResponse_ByID);

    static readonly grpc::Method<global::Cookie.CookieRequest_ByName, global::Cookie.CookieResponse_ByName> __Method_GetCookieByName = new grpc::Method<global::Cookie.CookieRequest_ByName, global::Cookie.CookieResponse_ByName>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCookieByName",
        __Marshaller_cookie_CookieRequest_ByName,
        __Marshaller_cookie_CookieResponse_ByName);

    static readonly grpc::Method<global::Cookie.CookieRequest_ByEmail, global::Cookie.CookieResponse_ByEmail> __Method_GetCookiesByEmail = new grpc::Method<global::Cookie.CookieRequest_ByEmail, global::Cookie.CookieResponse_ByEmail>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCookiesByEmail",
        __Marshaller_cookie_CookieRequest_ByEmail,
        __Marshaller_cookie_CookieResponse_ByEmail);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cookie.CookieServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for CookieService</summary>
    public partial class CookieServiceClient : grpc::ClientBase<CookieServiceClient>
    {
      /// <summary>Creates a new client for CookieService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CookieServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CookieService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CookieServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CookieServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CookieServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Cookie.CookieResponse AddCookie(global::Cookie.CookieRequest_Add request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCookie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse AddCookie(global::Cookie.CookieRequest_Add request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCookie, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> AddCookieAsync(global::Cookie.CookieRequest_Add request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCookieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> AddCookieAsync(global::Cookie.CookieRequest_Add request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCookie, null, options, request);
      }
      public virtual global::Cookie.CookieResponse DeleteCookie(global::Cookie.CookieRequest_Delete request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCookie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse DeleteCookie(global::Cookie.CookieRequest_Delete request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCookie, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> DeleteCookieAsync(global::Cookie.CookieRequest_Delete request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCookieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> DeleteCookieAsync(global::Cookie.CookieRequest_Delete request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCookie, null, options, request);
      }
      public virtual global::Cookie.CookieResponse QueryCookie(global::Cookie.CookieRequest_Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryCookie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse QueryCookie(global::Cookie.CookieRequest_Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryCookie, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> QueryCookieAsync(global::Cookie.CookieRequest_Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryCookieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> QueryCookieAsync(global::Cookie.CookieRequest_Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryCookie, null, options, request);
      }
      public virtual global::Cookie.CookieResponse TestCookie(global::Cookie.CookieRequest_Test request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestCookie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse TestCookie(global::Cookie.CookieRequest_Test request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestCookie, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> TestCookieAsync(global::Cookie.CookieRequest_Test request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestCookieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse> TestCookieAsync(global::Cookie.CookieRequest_Test request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestCookie, null, options, request);
      }
      public virtual global::Cookie.CookieResponse_ByID GetCookieByID(global::Cookie.CookieRequest_ByID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookieByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse_ByID GetCookieByID(global::Cookie.CookieRequest_ByID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCookieByID, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByID> GetCookieByIDAsync(global::Cookie.CookieRequest_ByID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookieByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByID> GetCookieByIDAsync(global::Cookie.CookieRequest_ByID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCookieByID, null, options, request);
      }
      public virtual global::Cookie.CookieResponse_ByName GetCookieByName(global::Cookie.CookieRequest_ByName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookieByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse_ByName GetCookieByName(global::Cookie.CookieRequest_ByName request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCookieByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByName> GetCookieByNameAsync(global::Cookie.CookieRequest_ByName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookieByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByName> GetCookieByNameAsync(global::Cookie.CookieRequest_ByName request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCookieByName, null, options, request);
      }
      public virtual global::Cookie.CookieResponse_ByEmail GetCookiesByEmail(global::Cookie.CookieRequest_ByEmail request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookiesByEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cookie.CookieResponse_ByEmail GetCookiesByEmail(global::Cookie.CookieRequest_ByEmail request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCookiesByEmail, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByEmail> GetCookiesByEmailAsync(global::Cookie.CookieRequest_ByEmail request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCookiesByEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cookie.CookieResponse_ByEmail> GetCookiesByEmailAsync(global::Cookie.CookieRequest_ByEmail request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCookiesByEmail, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CookieServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CookieServiceClient(configuration);
      }
    }

  }
}
#endregion
